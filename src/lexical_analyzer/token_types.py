from enum import Enum


class TokenTypes(Enum):
    INT = 1,
    FLOAT = 2,
    STRING = 3,
    BOOL = 4,
    INT_KWD = 5,
    SHORT = 6,
    LONG = 7,
    DOUBLE = 8,
    DECIMAL = 9,
    CHAR = 10,
    FOR_KWD = 11,
    IF_KWD = 12,
    ELSEIF_KWD = 13,
    ELSE_KWD = 14,
    LEFT_BRACE = 15,
    RIGHT_BRACE = 16,
    LEFT_BRACKET = 17,
    RIGHT_BRACKET = 18,
    LEFT_PAR = 19,
    RIGHT_PAR = 20,
    COMMA = 21,
    SPACE = 22,
    GE = 23,
    LE = 24,
    EQ = 25,
    GT = 26,
    LT = 27,
    NE = 28,
    NOT = 29,
    AND = 30,
    OR = 31,
    SEMICOLON = 32,
    DOUBLE_QUOTE = 33,
    PLUS = 34,
    MINUS = 35,
    MULTIPLY = 36,
    DIVIDE = 37,
    ASSIGN = 38,
    STATIC_KWD = 39,
    VOID_KWD = 40,
    REF_KWD = 41,
    CLASS_KWD = 42,
    VAR_KWD = 43,
    DOT = 44,
    LINE_COMMENT = 45,
    IDENTIFIER = 46,
    RETURN_KWD = 47,
    WHILE_KWD = 48,
    INCREMENT_KWD = 49,
    DECREMENT_KWD = 50,
    USING_KWD = 51,
    STRING_KWD = 52,
    EOF = 100


TOKEN_TYPES_REGEX = {
    TokenTypes.LINE_COMMENT: r"\/\/",
    TokenTypes.FLOAT: r"\d+\.\d+",
    TokenTypes.INT: r"\d+",
    TokenTypes.BOOL: r"true|false",
    TokenTypes.INCREMENT_KWD: r"\+\+",
    TokenTypes.DECREMENT_KWD: r"\-\-",
    TokenTypes.GE: r">=",
    TokenTypes.LE: r"<=",
    TokenTypes.EQ: r"=",
    TokenTypes.GT: r">",
    TokenTypes.LT: r"<",
    TokenTypes.NE: r"!=",
    TokenTypes.NOT: r"!",
    TokenTypes.AND: r"&&",
    TokenTypes.OR: r"\|\|",
    TokenTypes.SEMICOLON: r";",
    TokenTypes.DOUBLE_QUOTE: r"\"",
    TokenTypes.PLUS: r"\+",
    TokenTypes.MINUS: r"\-",
    TokenTypes.MULTIPLY: r"\*",
    TokenTypes.DIVIDE: r"\/",
    TokenTypes.ASSIGN: r"=",
    TokenTypes.DOT: r"\.",
    TokenTypes.COMMA: r",",
    TokenTypes.LEFT_BRACE: r"{",
    TokenTypes.RIGHT_BRACE: r"}",
    TokenTypes.LEFT_BRACKET: r"\[",
    TokenTypes.RIGHT_BRACKET: r"\]",
    TokenTypes.LEFT_PAR: r"\(",
    TokenTypes.RIGHT_PAR: r"\)",
    TokenTypes.SPACE: r" ",
    TokenTypes.STRING_KWD: r"\bstring\b",
    TokenTypes.RETURN_KWD: r"\breturn\b",
    TokenTypes.STATIC_KWD: r"\bstatic\b",
    TokenTypes.VOID_KWD: r"\bvoid\b",
    TokenTypes.REF_KWD: r"\bref\b",
    TokenTypes.CLASS_KWD: r"\bclass\b",
    TokenTypes.USING_KWD: r"\busing\b",
    TokenTypes.VAR_KWD: r"\bvar\b",
    TokenTypes.IF_KWD: r"\bif\b",
    TokenTypes.FOR_KWD: r"\bfor\b",
    TokenTypes.ELSEIF_KWD: r"\belse if\b",
    TokenTypes.WHILE_KWD: r"\bwhile\b",
    TokenTypes.INT_KWD: r"\bint\b",
    TokenTypes.IDENTIFIER: r"\b(?![0-9])[A-Za-z0-9_]+\b",

    TokenTypes.STRING: r"(?!x)x",
    TokenTypes.EOF: r"(?!x)x"
}


